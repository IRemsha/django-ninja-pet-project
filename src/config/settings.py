"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import environ
import json
import logging
from easy_thumbnails.conf import Settings as thumbnail_settings
from corsheaders.defaults import default_headers


env = environ.Env(
    SECRET_KEY=(str, ''),
    AUTH_SECRET=(str, ''),
    JWT_SECRET=(str, ''),
    POSTGRES_HOST=(str, ''),
    POSTGRES_DB=(str, ''),
    POSTGRES_USER=(str, ''),
    POSTGRES_PASSWORD=(str, ''),
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(str, ''),
)

SECRET_KEY = env('SECRET_KEY')
AUTH_SECRET = env('AUTH_SECRET')
JWT_SECRET = env('JWT_SECRET')


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DEBUG = env('DEBUG')
ALLOWED_HOSTS = json.loads(env('ALLOWED_HOSTS'))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django_celery_beat',
    'django_extensions',
    'api',
    'admin_reorder',
    'django_better_admin_arrayfield',
    'easy_thumbnails',
    'image_cropping',
    'django_cleanup',
    'corsheaders',
    'rangefilter',
    'csp',
    'mptt',
]


THUMBNAIL_PROCESSORS = ('image_cropping.thumbnail_processors.crop_corners',) + thumbnail_settings.THUMBNAIL_PROCESSORS


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
    'api.auth.middlewares.SecretAuthenticationMiddleware',
    'api.auth.middlewares.JWTAuthenticationMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = default_headers + ('secret', 'authentication')

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Yekaterinburg'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# S3 settings
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = 'https://ams3.digitaloceanspaces.com'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_LOCATION = env('AWS_LOCATION')
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_DEFAULT_ACL = 'public-read'

# Send email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = env('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
# EMAIL_PORT = 465
# EMAIL_USE_TLS = False
# EMAIL_USE_SSL = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'js'),
    # os.path.join(BASE_DIR, 'static')
)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755
FILE_UPLOAD_PERMISSIONS = 0o644

AUTH_USER_MODEL = 'api.Employee'

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': env('POSTGRES_DB'),
        'USER': env('POSTGRES_USER'),
        'PASSWORD': env('POSTGRES_PASSWORD'),
        'HOST': env('POSTGRES_HOST'),
        'PORT': 5432,
    }
}

ADMIN_REORDER = (
    {
        'app': 'api',
        'label': 'Общее',
        'models': (
            'api.Client',
            'api.Project',
            'api.ProjectComponent',
            'api.Employee',
            'api.EmployeeAbsence',
            'api.ChangesSalary',
            'api.Equipment',
            'api.Department',
        ),
    },
    {
        'app': 'api',
        'label': 'Доходы',
        'models': (
            'api.ClientIncome',
            'api.ProjectIncome',
            'api.OtherIncome',
            'api.IncomeCategory'
        ),
    },
    {
        'app': 'api',
        'label': 'Расходы',
        'models': (
            'api.SalaryExpense',
            'api.VacationExpense',
            'api.SickLeaveExpense',
            'api.AwardExpense',
            'api.CorporateExpense',
            'api.CorporateExpenseCategory',
        ),
    },
    {'app': 'api', 'label': 'Переводы между счетами', 'models': ('api.TransferMoney',)},
    {
        'app': 'api',
        'label': 'Справочники',
        'models': (
            'api.ProjectStatus',
            'api.CompanyAccount',
            'api.EmployeePhoto',
            'api.EquipmentType',
            'api.OperatingSystem',
            'api.Address',
            'api.Office',
        ),
    },
    {
        'app': 'api',
        'label': 'Admin',
        'models': (
            'api.TogglRecord',
            'auth.Group',
        ),
    },
    {
        'app': 'api',
        'label': 'Скилы',
        'models': (
            'api.Skill',
            'api.SkillScore',
            'api.SkillSection',
            'api.SkillGroup',
        ),
    },
    {
        'app': 'api',
        'label': 'PERIODIC TASKS',
        'models': (
            'django_celery_beat.ClockedSchedule',
            'django_celery_beat.CrontabSchedule',
            'django_celery_beat.IntervalSchedule',
            'django_celery_beat.PeriodicTask',
            'django_celery_beat.SolarSchedule',
        ),
    },
)

DEFAULT_USER_GROUP_NAME = 'Intern'
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

CELERY_BROKER_URL = 'amqp://guest:guest@rabbitmq:5672'
CELERY_RESULT_BACKEND = 'rpc'

APPEND_SLASH = False

DEFAULT_COMPANY_ACCOUNT_ID = env('DEFAULT_COMPANY_ACCOUNT_ID')

logging.basicConfig(level='INFO')
